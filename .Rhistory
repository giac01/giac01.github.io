ttps://scholar.google.co.uk/citations?hl=en&user=lbJACXwAAAAJ&view_op=list_works&sortby=pubdate
3
academicons:google-scholar
data(mtcars)
head(mtcars)
cor(mtcars)
df = mtcars
data(mtcars)
head(mtcars)
df = mtcars
cor(mtcars)
corrplot
?corrplot
corrplot
??corrplot
install.packages("corrplot")
corrplot::corrplot(df)
corrplot::corrplot(cor(df))
?corrplot::corrplot
gbtoolbox::plot_correlations(df)
corrplot::corrplot(cor(df), addCoef.col = 'black')
# Install the dagitty package if you haven't already
install.packages("dagitty")
# Install the dagitty package if you haven't already
if (!require(dagitty)) {
install.packages("dagitty")
library(dagitty)
} else {
library(dagitty)
}
# Load the dagitty package
library(dagitty)
# Define the DAG structure
dag <- dagitty("
dag {
General_Cognitive_Ability [pos= '0,0']
Number_Sense [pos= '1,1']
Non_Verbal_Reasoning [pos= '1,-1']
Mathematical_Ability [pos= '2,0']
Error_NS [pos= '2,1']
Error_NVR [pos= '2,-1']
Error_MA [pos= '3,0']
General_Cognitive_Ability -> Number_Sense
General_Cognitive_Ability -> Non_Verbal_Reasoning
General_Cognitive_Ability -> Mathematical_Ability
Number_Sense -> Mathematical_Ability
Non_Verbal_Reasoning -> Mathematical_Ability
Error_NS -> Number_Sense
Error_NVR -> Non_Verbal_Reasoning
Error_MA -> Mathematical_Ability
}
")
# Define the DAG structure
dag <- dagitty("
dag {
General_Cognitive_Ability [pos= '0,0']
Number_Sense [pos= '1,1']
Non_Verbal_Reasoning [pos= '1,-1']
Mathematical_Ability [pos= '2,0']
Error_NS [pos= '2,1']
Error_NVR [pos= '2,-1']
Error_MA [pos= '3,0']
General_Cognitive_Ability -> Number_Sense
General_Cognitive_Ability -> Non_Verbal_Reasoning
General_Cognitive_Ability -> Mathematical_Ability
Number_Sense -> Mathematical_Ability
Non_Verbal_Reasoning -> Mathematical_Ability
Error_NS -> Number_Sense
Error_NVR -> Non_Verbal_Reasoning
Error_MA -> Mathematical_Ability
}")
# Install the dagitty package if you haven't already
if (!require(dagitty)) {
install.packages("dagitty")
library(dagitty)
} else {
library(dagitty)
}
# Load the dagitty package
library(dagitty)
# Define the DAG structure
dag <- dagitty("
dag {
General_Cognitive_Ability [pos= '0,0']
Number_Sense [pos= '1,1']
Non_Verbal_Reasoning [pos= '1,-1']
Mathematical_Ability [pos= '2,0']
Error_NS [pos= '2,1']
Error_NVR [pos= '2,-1']
Error_MA [pos= '3,0']
General_Cognitive_Ability -> Number_Sense
General_Cognitive_Ability -> Non_Verbal_Reasoning
General_Cognitive_Ability -> Mathematical_Ability
Number_Sense -> Mathematical_Ability
Non_Verbal_Reasoning -> Mathematical_Ability
Error_NS -> Number_Sense
Error_NVR -> Non_Verbal_Reasoning
Error_MA -> Mathematical_Ability
}")
# Check if dagitty is installed, and install if necessary
if (!require(dagitty)) {
install.packages("dagitty")
library(dagitty)
} else {
library(dagitty)
}
# Define the DAG structure
dag <- dagitty("
dag {
General_Cognitive_Ability [pos= \"0,0\"]
Number_Sense [pos= \"1,1\"]
Non_Verbal_Reasoning [pos= \"1,-1\"]
Mathematical_Ability [pos= \"2,0\"]
Error_NS [pos= \"2,1\"]
Error_NVR [pos= \"2,-1\"]
Error_MA [pos= \"3,0\"]
General_Cognitive_Ability -> Number_Sense
General_Cognitive_Ability -> Non_Verbal_Reasoning
General_Cognitive_Ability -> Mathematical_Ability
Number_Sense -> Mathematical_Ability
Non_Verbal_Reasoning -> Mathematical_Ability
Error_NS -> Number_Sense
Error_NVR -> Non_Verbal_Reasoning
Error_MA -> Mathematical_Ability
}
")
# Plot the DAG
plot(dag)
# Check if dagitty is installed, and install if necessary
if (!require(dagitty)) {
install.packages("dagitty")
library(dagitty)
} else {
library(dagitty)
}
# Define the DAG structure
dag <- dagitty("
dag {
General_Cognitive_Ability [pos= \"0,0\"]
Number_Sense [pos= \"1,1\"]
Non_Verbal_Reasoning [pos= \"1,-1\"]
Mathematical_Ability [pos= \"2,0\"]
Error_NS [pos= \"2,1\"]
Error_NVR [pos= \"2,-1\"]
Error_MA [pos= \"3,0\"]
General_Cognitive_Ability -> Number_Sense
General_Cognitive_Ability -> Non_Verbal_Reasoning
General_Cognitive_Ability -> Mathematical_Ability
Error_NS -> Number_Sense
Error_NVR -> Non_Verbal_Reasoning
Error_MA -> Mathematical_Ability
}
")
# Plot the DAG
plot(dag)
# Install the necessary packages if they are not already installed
if (!require(ggdag)) {
install.packages("ggdag")
library(ggdag)
} else {
library(ggdag)
}
# Define the DAG structure
dag <- dagify(
Number_Sense ~ General_Cognitive_Ability + Error_NS,
Non_Verbal_Reasoning ~ General_Cognitive_Ability + Error_NVR,
Mathematical_Ability ~ General_Cognitive_Ability + Error_MA,
coords = list(
x = c(General_Cognitive_Ability = 0, Number_Sense = 1, Non_Verbal_Reasoning = 1, Mathematical_Ability = 2, Error_NS = 1, Error_NVR = 1, Error_MA = 3),
y = c(General_Cognitive_Ability = 0, Number_Sense = 1, Non_Verbal_Reasoning = -1, Mathematical_Ability = 0, Error_NS = 2, Error_NVR = -2, Error_MA = 0)
)
)
# Plot the DAG using ggdag
ggdag(dag) +
theme_dag()
ggdag(dag)
?theme_dag
# Plot the DAG using ggdag
ggdag(dag) +
theme_dag()
# Plot the DAG using ggdag
ggdag(dag) +
geom_dag_text(col = "red")
# Plot the DAG using ggdag
ggdag(dag) +
geom_dag_text(col = "red") +
theme_dag()
# Define the DAG structure
dag <- dagify(
NS ~ GCA + Error_NS,
NVR ~ GCA + Error_NVR,
Math ~ GCA + Error_MA,
coords = list(
x = c(General_Cognitive_Ability = 0, Number_Sense = 1, Non_Verbal_Reasoning = 1, Mathematical_Ability = 2, Error_NS = 1, Error_NVR = 1, Error_MA = 3),
y = c(General_Cognitive_Ability = 0, Number_Sense = 1, Non_Verbal_Reasoning = -1, Mathematical_Ability = 0, Error_NS = 2, Error_NVR = -2, Error_MA = 0)
)
)
# Define the DAG structure
dag <- dagify(
NS ~ GCA + Error_NS,
NVR ~ GCA + Error_NVR,
Math ~ GCA + Error_MA,
coords = list(
x = c(GCA = 0, NS = 1, NVR = 1, Math = 2, Error_NS = 1, Error_NVR = 1, Error_MA = 3),
y = c(GCA = 0, NS = 1, NVR = -1, Math = 0, Error_NS = 2, Error_NVR = -2, Error_MA = 0)
)
)
# Plot the DAG using ggdag
ggdag(dag) +
geom_dag_text(col = "red") +
theme_dag()
# Install the necessary packages if they are not already installed
if (!require(ggdag)) {
install.packages("ggdag")
library(ggdag)
} else {
library(ggdag)
}
if (!require(dagitty)) {
install.packages("dagitty")
library(dagitty)
} else {
library(dagitty)
}
# Define the DAG structure
dag <- dagify(
Number_Sense ~ General_Cognitive_Ability + Error_NS,
Non_Verbal_Reasoning ~ General_Cognitive_Ability + Error_NVR,
Mathematical_Ability ~ General_Cognitive_Ability + Error_MA,
coords = list(
x = c(General_Cognitive_Ability = 0, Number_Sense = 1, Non_Verbal_Reasoning = 1, Mathematical_Ability = 2, Error_NS = 1, Error_NVR = 1, Error_MA = 3),
y = c(General_Cognitive_Ability = 0, Number_Sense = 1, Non_Verbal_Reasoning = -1, Mathematical_Ability = 0, Error_NS = 2, Error_NVR = -2, Error_MA = 0)
)
)
# Convert to a tidy dagitty object
tidy_dag <- tidy_dagitty(dag)
# Plot the DAG using ggdag
ggdag(tidy_dag) +
geom_dag_edges() +
geom_dag_node(size = 10) +
geom_dag_text(color = "black", size = 5) +
theme_dag()
#| code-fold: true
# Install the necessary packages if they are not already installed
if (!require(ggdag)) {
install.packages("ggdag")
library(ggdag)
} else {
library(ggdag)
}
# Define the DAG structure
dag <- dagify(
NS ~ GCA + Error_NS,
NVR ~ GCA + Error_NVR,
Math ~ GCA + Error_MA,
coords = list(
x = c(GCA = 0, NS = 1, NVR = 1, Math = 2, Error_NS = 1, Error_NVR = 1, Error_MA = 3),
y = c(GCA = 0, NS = 1, NVR = -1, Math = 0, Error_NS = 2, Error_NVR = -2, Error_MA = 0)
)
)
# Plot the DAG using ggdag
ggdag(dag) +
geom_dag_text(col = "red") +
theme_dag()
# Plot the DAG using ggdag
ggdag(dag) +
ggdag_adjust(node_size = 16) +
geom_dag_text(col = "red") +
theme_dag()
# Plot the DAG using ggdag
ggdag(dag) +
geom_dag_text(col = "red") +
theme_dag() +
ggdag_adjust(node_size = 16)
# Plot the DAG using ggdag
ggdag(dag, node_size = 20) +
geom_dag_text(col = "red") +
theme_dag()
# Plot the DAG using ggdag
ggdag(dag, node_size = 30) +
geom_dag_text(col = "white") +
theme_dag()
# Plot the DAG using ggdag
ggdag(dag, node_size = 20) +
geom_dag_text(col = "white") +
theme_dag()
df_sim = data.frame(gca, nvr, ns, math)
sample_size = 10000
gca      = rnorm(N)
sample_size = 10000
gca      = rnorm(sample_size)
err_ns   = rnorm(sample_size)
err_nvr  = rnorm(sample_size)
err_math = rnorm(sample_size)
nvr = gca + err_nvr
ns  = gca + err_ns
math = gca + err_math
df_sim = data.frame(gca, nvr, ns, math)
model0 = lm(math ~ ns, data = df_sim)
model1 = lm(math ~ ns + nvr, data = df_sim)
summary(model0)
summary(model1)
set.seed(10)
sample_size = 10000
gca      = rnorm(sample_size)
err_ns   = rnorm(sample_size)
err_nvr  = rnorm(sample_size)
err_math = rnorm(sample_size)
nvr = gca + err_nvr
ns  = gca + err_ns
math = gca + err_math
df_sim = data.frame(gca, nvr, ns, math)
model0 = lm(math ~ ns, data = df_sim)
model1 = lm(math ~ ns + nvr, data = df_sim)
summary(model0)
summary(model1)
set.seed(10)
sample_size = 100000
gca      = rnorm(sample_size)
err_ns   = rnorm(sample_size)
err_nvr  = rnorm(sample_size)
err_math = rnorm(sample_size)
nvr = gca + err_nvr
ns  = gca + err_ns
math = gca + err_math
df_sim = data.frame(gca, nvr, ns, math)
model0 = lm(math ~ ns, data = df_sim)
model1 = lm(math ~ ns + nvr, data = df_sim)
summary(model0)
summary(model1)
cor(gca, nvr)^2
set.seed(10)
sample_size = 100000
gca      = rnorm(sample_size)
err_ns   = rnorm(sample_size)
err_nvr  = rnorm(sample_size)
err_math = rnorm(sample_size)
nvr = gca  + .1*err_nvr
ns  = gca  + err_ns
math = gca + err_math
df_sim = data.frame(gca, nvr, ns, math)
cor(nvr,gca)^2
set.seed(10)
sample_size = 100000
gca      = rnorm(sample_size)
err_ns   = rnorm(sample_size)
err_nvr  = rnorm(sample_size)
err_math = rnorm(sample_size)
nvr = gca  + 1/3*err_nvr # see https://www.wolframalpha.com/input?i=.9+%3D+1%2F%281%2Ba%5E2%29
ns  = gca  + err_ns
math = gca + err_math
df_sim = data.frame(gca, nvr, ns, math)
cor(nvr,gca)^2
cor(nvr, gca)^2
round(cor(nvr, gca)^2,2)
round(cor(nvr, gca)^2,3)
round(cor(nvr, gca)^2,digits =3)
round(cor(nvr, gca)^2,3)
set.seed(10)
sample_size = 100000
gca      = rnorm(sample_size)
err_ns   = rnorm(sample_size)
err_nvr  = rnorm(sample_size)
err_math = rnorm(sample_size)
nvr = gca  + 1/3*err_nvr # see https://www.wolframalpha.com/input?i=.9+%3D+1%2F%281%2Ba%5E2%29
ns  = gca  + err_ns
math = gca + err_math
df_sim = data.frame(gca, nvr, ns, math)
print("Reliability = ")
round(cor(nvr, gca)^2,3)
model0 = lm(math ~ ns, data = df_sim)
model1 = lm(math ~ ns + nvr, data = df_sim)
summary(model0)
summary(model1)
print("Reliability = ",round(cor(nvr, gca)^2,3))
cat("Reliability = ",round(cor(nvr, gca)^2,3))
cat("Reliability of NVR for measuring GCA = ",round(cor(nvr, gca)^2,3))
set.seed(10)
sample_size = 100000
gca      = rnorm(sample_size)
err_ns   = rnorm(sample_size)
err_nvr  = rnorm(sample_size)
err_math = rnorm(sample_size)
nvr = gca  + 1/3*err_nvr # see https://www.wolframalpha.com/input?i=.9+%3D+1%2F%281%2Ba%5E2%29
ns  = gca  + err_ns
math = gca + err_math
df_sim = data.frame(gca, nvr, ns, math)
cat("Reliability of NVR for measuring GCA = ",round(cor(nvr, gca)^2,3))
model0 = lm(math ~ ns, data = df_sim)
model1 = lm(math ~ ns + nvr, data = df_sim)
summary(model0)
summary(model1)
model0 = lm(math ~ ns + gca, data = df_sim)
model1 = lm(math ~ ns + nvr, data = df_sim)
summary(model0)
summary(model1)
# Plot the DAG using ggdag
ggdag(dag, node_size = 20) +
geom_dag_text() +
theme_dag() +
labs(title = "Hypothesised Causal Diagram")
# Plot the DAG using ggdag
ggdag(dag, node_size = 20) +
geom_dag_text() +
theme_dag() +
ggplot2::labs(title = "Hypothesised Causal Diagram")
quarto rendr
